{"prompt": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] Constraints: 2 <= nums.length <= 104 -109 <= nums[i] <= 109 -109 <= target <= 109 Only one valid answer exists.", "completion": "\\nclass Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        n = len(nums)\\n        for i in range(n - 1):\\n            for j in range(i + 1, n):\\n                if nums[i] + nums[j] == target:\\n                    return [i, j]\\n        return []  # No solution found\\n\\n"}
{"prompt": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example 1: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807. Example 2: Input: l1 = [0], l2 = [0] Output: [0] Example 3: Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1] Constraints: The number of nodes in each linked list is in the range [1, 100]. 0 <= Node.val <= 9 It is guaranteed that the list represents a number that does not have leading zeros.", "completion": "\\nclass Solution:\\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        dummyHead = ListNode(0)\\n        tail = dummyHead\\n        carry = 0\\n\\n        while l1 is not None or l2 is not None or carry != 0:\\n            digit1 = l1.val if l1 is not None else 0\\n            digit2 = l2.val if l2 is not None else 0\\n\\n            sum = digit1 + digit2 + carry\\n            digit = sum % 10\\n            carry = sum // 10\\n\\n            newNode = ListNode(digit)\\n            tail.next = newNode\\n            tail = tail.next\\n\\n            l1 = l1.next if l1 is not None else None\\n            l2 = l2.next if l2 is not None else None\\n\\n        result = dummyHead.next\\n        dummyHead.next = None\\n        return result\\n"}
{"prompt": "Given a string s, find the length of the longest substring without repeating characters. Example 1: Input: s = \"abcabcbb\" Output: 3 Explanation: The answer is \"abc\", with the length of 3. Example 2: Input: s = \"bbbbb\" Output: 1 Explanation: The answer is \"b\", with the length of 1. Example 3: Input: s = \"pwwkew\" Output: 3 Explanation: The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring. Constraints: 0 <= s.length <= 5 * 104 s consists of English letters, digits, symbols and spaces.", "completion": "\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        n = len(s)\\n        maxLength = 0\\n        charSet = set()\\n        left = 0\\n        \\n        for right in range(n):\\n            if s[right] not in charSet:\\n                charSet.add(s[right])\\n                maxLength = max(maxLength, right - left + 1)\\n            else:\\n                while s[right] in charSet:\\n                    charSet.remove(s[left])\\n                    left += 1\\n                charSet.add(s[right])\\n        \\n        return maxLength\\n\\n"}
